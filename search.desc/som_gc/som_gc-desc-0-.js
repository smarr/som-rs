searchState.loadedDescShard("som_gc", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a Mutator reference for the thread.\nReturn an iterator that includes all the mutators at the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExplicitly mentions what an allocation was requested for. …\nTODO rename, maybe MutatorWrapper\nImplements a per-type magic number. GC needs to access …\nCallbacks used to provide MMTk-&gt;VM communication.\nAll functions necessary to allocate memory from within …\nTo save on some space in the trait itself. Bit overkill, …\nAdapt an object after being copied elsewhere (not really …\nAllocates a slice that only contains values that ARE NOT …\nDeprecated because too likely to be unsafe: GC triggered …\nSee above for why it’s deprecated.\nAllocates a type on the heap and returns a pointer to it. …\nAllocates a type, but with a given size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDispatches a manual collection request to MMTk.\nReturns the number of total GC collections.\nGet the size of the object. Needed when copying it\nGet the VM roots.\nReturns the total time spent performing GC.\nReturns the number of used bytes\nInitialize the GCInterface. Internally inits MMTk and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not we’re currently performing GC. Might be …\nRequest <code>size</code> bytes from MMTk. Importantly, this MAY …\nTODO doc + should likely deduce the size from the type\nScans an object. Needed for tracing.\nA pointer to the heap for GC.\nGet a const pointer to the underlying data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if a frame is “empty”, i.e. contains the …\nChecks if the pointer points to a valid space. Because of …\nSpecial GC ref that stores a list. It’s really just a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the address of the Nth element.\nThis is the offset from the object reference to an …\nThis is the offset from the allocation result to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")