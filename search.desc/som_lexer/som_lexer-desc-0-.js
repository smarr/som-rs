searchState.loadedDescShard("som_lexer", 0, "This crate serves as the lexical analyser for the Simple …\nA ampersand, the binary ‘and’ operator (<code>&amp;</code>).\nThe assignment operator (<code>:=</code>).\nAn at-sign (<code>@</code>).\nA colon (<code>:</code>).\nA comma (<code>,</code>).\nA comment (<code>&quot;what a beautiful and majestic piece of code&quot;</code>).\nA forward slash, the division operator (<code>/</code>).\nA closing square-bracket (<code>]</code>).\nA closing parenthesis (<code>)</code>).\nAn equal sign, the equality operator (<code>=</code>).\nA caret, the return operator (<code>^</code>).\nAn identifier (<code>foo</code>).\nA keyword (<code>fromString:</code>).\nA lesser-than sign, the lesser-than operator (<code>&gt;</code>).\nThe lexer for the Simple Object Machine.\nA big integer literal (<code>1542252643255252434</code>).\nA floating-point literal (<code>10.6</code>).\nAn integer literal (<code>10</code>).\nA string literal (<code>&#39;hello, world&#39;</code>).\nA symbol literal (<code>#foo</code>).\nA minus sign, the substraction operator (<code>-</code>)\nA backward slash (<code>\\\\</code>).\nA greater-than sign, the greater-than operator (<code>&gt;</code>).\nA pound sign immediately followed by opening parenthesis (…\nAn opening square-bracket (<code>[</code>).\nAn opening parenthesis (<code>(</code>).\nA tilde, the bitwise ‘not’ operator (<code>~</code>).\nA sequence of operators (eg: <code>&gt;&gt;&gt;</code>).\nA vertical bar, the binary ‘or’ operator (<code>|</code>).\nA percentage sign, the modulo operator (<code>%</code>).\nA period, the statement terminator (<code>.</code>).\nA plus, the addition operator (‘+’).\nA pound sign (<code>#</code>).\nThe primitive keyword (<code>primitive</code>).\nThe separator sequence (<code>-------</code>).\nA star, the multiplication operator (<code>*</code>).\nRepresents a token from the lexer.\nSome whitespace (<code> </code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new lexer.\nConfigure the lexer on whether to skip comments or not.\nConfigure the lexer on whether to skip whitespace or not.\nConsume the lexer and return the left-over text.")