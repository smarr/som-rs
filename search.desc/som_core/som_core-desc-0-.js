searchState.loadedDescShard("som_core", 0, "This crate contains common types that are useful to be …\nThe SOM Abstract Syntax Tree definitions: the common …\nThe SOM bytecode definitions. Used only by the bytecode …\nFor parsing command line arguments\nThe SOM core classes.\nFacilities for string interning.\nRead of an argument.\nRepresents an array literal (eg. <code>$(1 2 3)</code>)\nRepresents a big integer (bigger than a 64-bit signed …\nRepresents a binary operation.\nRepresents a block.\nA block (eg. <code>[ :value | counter incrementBy: value ]</code>).\nRepresents the contents of a body (within a term or block).\nAn actual body for the method, with locals.\nRepresents a class definition.\nRepresents a decimal number literal (eg. <code>3.14</code>).\nAn exit operation (eg. <code>^counter</code>). Second argument is the …\nRepresents an expression.\nA reference to a binding (eg. <code>counter</code>).\nThis does NOT exist: this is a field write which will be …\nRepresents a integer number literal (eg. <code>42</code>).\nRepresents a literal.\nA literal (eg. <code>&#39;foo&#39;</code>, <code>10</code>, <code>#foo</code>, …).\nRead of a local var.\nAn assignment to a binding (eg. <code>counter := 10</code>).\nRepresents a message send.\nA message send (eg. <code>counter incrementBy: 5</code>).\nRepresents a method’s body.\nRepresents a method definition.\nRead of a nonlocal var.\nA primitive (meant to be implemented by the VM itself).\nRepresents a string literal (eg. <code>&#39;hello&#39;</code>).\nA message with “super” as the receiver, so the …\nRepresents a symbol literal (eg. <code>#foo</code>).\nRepresents a term.\nThe method’s body.\nRepresents the block’s body.\nThe body of the term.\nThe expressions in the body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs the last expression terminated with a period ?\nThe locals for instances of that class.\nThe methods declared for instances of that class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we access the static or instance methods of the …\nRepresents the left-hand side.\nThe name of the class.\nThe names of the locals.\nRepresents the parameters’ names.\nRepresents the operator symbol.\nThe object to which the message is sent to.\nThe object to which the message is sent to. TODO should …\nRepresents the right-hand side.\nThe method’s signature (eg. <code>println</code>, <code>at:put:</code> or <code>==</code>).\nThe signature of the message (eg. “ifTrue:ifFalse:”).\nThe signature of the message (eg. “ifTrue:ifFalse:”).\nThe static locals for that class.\nThe static methods declared for that class.\nThe name of the superclass.\nThe list of dynamic values that are passed.\nThe list of dynamic values that are passed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the instruction’s name.\nGet the instruction’s name padded so that every padded …\nArguments to pass to the <code>#run:</code> function.\nSet search path for application classes.\nDisassemble the class, instead of executing.\nFile to evaluate.\nReturns the argument unchanged.\nEnable verbose output (with timing information).\nCalls <code>U::from(self)</code>.\nEnable verbose output (with timing information).\nThe core classes of the SOM interpreter.\nGet the <strong>Array</strong> class.\nThe <strong>Array</strong> class.\nGet the <strong>Block1</strong> class.\nThe <strong>Block1</strong> class.\nGet the <strong>Block2</strong> class.\nThe <strong>Block2</strong> class.\nGet the <strong>Block3</strong> class.\nThe <strong>Block3</strong> class.\nGet the <strong>Block</strong> class.\nThe <strong>Block</strong> class.\nThe <strong>Boolean</strong> class.\nThe <strong>Class</strong> class.\nGet the <strong>Double</strong> class.\nThe <strong>Double</strong> class.\nGet the <strong>False</strong> class.\nThe <strong>False</strong> class.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads core classes given a closure that returns a pointer …\nGet the <strong>Integer</strong> class.\nThe <strong>Integer</strong> class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <strong>Metaclass</strong> class.\nThe <strong>Class</strong> class.\nGet the <strong>Method</strong> class.\nThe <strong>Method</strong> class.\nGet the <strong>Nil</strong> class.\nThe <strong>Nil</strong> class.\nGet the <strong>Object</strong> class.\nThe <strong>Object</strong> class.\nGet the <strong>Primitive</strong> class.\nThe <strong>Primitive</strong> class.\nGet the <strong>String</strong> class.\nThe <strong>String</strong> class.\nGet the <strong>Symbol</strong> class.\nThe <strong>Symbol</strong> class.\nGet the <strong>System</strong> class.\nThe <strong>System</strong> class.\nGet the <strong>True</strong> class.\nThe <strong>True</strong> class.\nA string interner.\nReturns the argument unchanged.\nIntern a given string.\nCalls <code>U::from(self)</code>.\nGet the string associated to a given interning ID.\nGet the ID given a string, if it exists. Only used for …\nInitialize the interner with an initial capacity.")