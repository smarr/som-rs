searchState.loadedDescShard("som_interpreter_bc", 0, "This is the interpreter for the Simple Object Machine.\nSee <code>UNIVERSE_RAW_PTR_CONST</code>.\nRaw pointer needed to trace GC roots. Meant to be accessed …\nFacilities for compiling code into bytecode. Compiles …\nUsed for debugging. Debugging facilities.\nStructs and info related to interacting with the GC\nFacilities for manipulating values.\nThe interpreter’s main data structure.\nDefinitions for all supported primitives.\nThe collection of all known SOM objects during execution.\nFacilities for manipulating values.\nVM objects.\nFacilities to compile code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFacilities for disassembling bytecode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current bytecode index.\nPointer to the frame’s bytecodes, to not have to read …\nThe current frame.\nGC can trigger when the interpreter wants to allocate a …\nReturns the argument unchanged.\nReturn the current frame. It’s in an <code>UnsafeCell</code> for …\nCalls <code>U::from(self)</code>.\nCreates and allocates a new frame corresponding to a …\nCreates and allocates a new frame corresponding to a …\nCreates and allocates a new frame corresponding to a …\nThe time record of the interpreter’s creation.\nPrimitives for the <strong>Array</strong> class.\nPrimitives for the <strong>Block</strong> and <strong>Block1</strong> class.\nPrimitives for the <strong>Block2</strong> class.\nPrimitives for the <strong>Block3</strong> class.\nPrimitives for the <strong>Class</strong> class.\nPrimitives for the <strong>Double</strong> class.\nPrimitives for the <strong>False</strong> class.\nPrimitives for the <strong>Integer</strong> class.\nPrimitives for the <strong>Method</strong> class and the <strong>Primitive</strong> class.\nPrimitives for the <strong>Object</strong> class.\nPrimitives for the <strong>String</strong> class.\nPrimitives for the <strong>Symbol</strong> class.\nPrimitives for the <strong>System</strong> class.\nPrimitives for the <strong>True</strong> class.\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nGC default heap size\nThe central data structure for the interpreter.\nAssign a value to a global binding.\nThe path to search in for new classes.\nThe interpreter’s core classes.\nCall <code>doesNotUnderstand:</code> on the given value, if it is …\nCall <code>escapedBlock:</code> on the given value, if it is defined.\nReturns the argument unchanged.\nGC interface for GC operations\nThe known global bindings.\nCall <code>System&gt;&gt;#initialize:</code> with the given name, if it is …\nIntern a symbol.\nThe string interner for symbols.\nCalls <code>U::from(self)</code>.\nLoad a class from its name into this universe.\nLoad a system class (with an incomplete hierarchy).\nSearch for a global binding.\nLookup a symbol.\nCall <code>unknownGlobal:</code> on the given value, if it is defined.\nInitialize the universe from the given classpath (and …\nInitialize the universe from the given classpath and heap …\nRepresents an SOM value.\nReturns this value as an array, if such is its type.\nReturns this value as a block, if such is its type.\nReturns this value as a class, if such is its type.\nReturns this value as an instance, if such is its type.\nReturns this value as an invokable, if such is its type.\nGet the class of the current value.\nValue type(s!), and value-related code. Used to convert …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSearch for a given method for this value.\nOur default type: NaN boxed\nGet the string representation of this value.\nOur enum based type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn array of values.\nA big integer value (arbitrarily big).\nA block value, ready to be evaluated.\nA boolean value (<strong>true</strong> or <strong>false</strong>).\nA bare class object.\nAn floating-point value.\nThe boolean <code>false</code> value.\nThe integer <code>1</code> value.\nThe integer <code>0</code> value.\nA generic (non-primitive) class instance.\nAn integer value.\nA bare invokable.\nThe <code>nil</code> value.\nThe <strong>nil</strong> value.\nA string value.\nAn interned symbol value.\nThe boolean <code>true</code> value.\nRepresents an SOM value as an enum.\nReturns this value as an array, if such is its type.\nReturns this value as a big integer, if such is its type.\nReturns this value as a block, if such is its type.\nReturns this value as a boolean, if such is its type.\nReturns this value as a class, if such is its type.\nReturns this value as a double, if such is its type.\nReturns this value as an instance, if such is its type.\nReturns this value as an integer, if such is its type.\nReturns this value as an invokable, if such is its type.\nReturns this value as a string, if such is its type.\nReturns this value as a symbol, if such is its type.\nAssign a value to a local binding within this value.\nGet the class of the current value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether this value is an array.\nReturns whether this value is a big integer.\nReturns whether this value is a block.\nReturns whether this value is a boolean.\nReturns whether or not it’s a boolean corresponding to …\nReturns whether or not it’s a boolean corresponding to …\nReturns whether this value is a class.\nReturns whether this value is a double.\nReturns whether this value is an instance.\nReturns whether this value is an integer.\nReturns whether this value is an invokable.\nReturns whether this value is `nil``.\nReturns whether this value is a string.\nReturns whether this value is a symbol.\nSearch for a local binding within this value.\nSearch for a given method for this value.\nReturns a new array value.\nReturns a new big integer value.\nReturns a new block value.\nReturns a new boolean value.\nReturns a new class value.\nReturns a new double value.\nReturns a new instance value.\nReturns a new integer value.\nReturns a new invokable value.\nReturns a new string value.\nReturns a new symbol value.\nGet the string representation of this value.\nFacilities for manipulating blocks.\nFacilities for manipulating classes.\nFacilities for manipulating stack frames.\nFacilities for manipulating class instances.\nFacilities for manipulating class methods.\nFor trivial methods, optimized recurrent small methods.\nRepresents an executable block.\nBlock environment needed for execution, e.g. the block’s …\nGet the block’s class.\nReference to the captured stack frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the number of parameters this block accepts.\nRepresents a loaded class.\nAssign a value to a local binding.\nGet the class of this class.\nThe class of this class.\nThe class’ fields’ names, in the same order as the …\nThe class’ fields.\nReturns the argument unchanged.\nGet the total number of fields, counting the superclasses.\nChecks whether there exists a local binding of a given …\nCalls <code>U::from(self)</code>.\nIs this class a static one ? Unused argument.\nSearch for a local binding.\nSearch for a given method within this class.\nThe class’ methods/invokables.\nGet the class’ name.\nThe class’ name.\nSet the class of this class (as a weak reference).\nSet the superclass of this class (as a weak reference).\nGet the superclass of this class.\nThe superclass of this class.\nRepresents a stack frame.\nIterate over the stack for a given frame. It iterates like …\nAllocates a frame for a block. We assume that the block is …\nAllocates the very first frame, for the <code>initialize:</code> call …\nAssign to an argument.\nAssign to a local binding.\nBytecode index.\nThe method the execution context currently is in. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nReturns the true size of the <code>Frame</code>, counting the extra …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for a local binding. This function, and its …\nNeeded for similar reasons as the number of arguments, for …\nIt’s also stored in the current context, but we keep it …\nnth_frame_back but through prev_frame ptr. TODO: clarify …\nGets the nth element from the stack (not in reverse order …\nGets the nth element from the stack mutably (not in …\nThe previous frame. Frames are handled as a linked list\nGets the total number of elements on the stack. Only used …\nmarkers. we don’t use them directly. it’s mostly a …\nStack pointer/index. Points to the NEXT element that can …\nRepresents a generic (non-primitive) class instance.\nGet the class of which this is an instance from.\nThe class of which this is an instance from.\nWe store the fields right after the instance in memory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the superclass of this instance’s class.\nThe minimum for every kind of method: a signature and a …\nA user-defined method from the AST.\nRepresents a class method.\nData for a method, or a block.\nAn interpreter primitive.\nA trivial getter method\nA trivial global read\nA trivial literal read\nA trivial setter method\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this invokable is a primitive.\nUsed during initialization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")