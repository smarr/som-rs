searchState.loadedDescShard("som_interpreter_ast", 0, "This is the interpreter for the Simple Object Machine.\nRaw pointer to trace the global value stack as a root.\nRaw pointer needed to trace GC roots. Meant to be accessed …\nAST specific to the AST interpreter\nGenerates the AST\nFacilities for evaluating nodes and expressions.\nTo interact with the GC.\nFacilities for manipulating values.\nFacilities for invoking methods and/or primitives.\nSpecialized AST nodes\nDefinitions for all supported primitives.\nThe interpreter’s main data structure.\nFacilities for manipulating values.\nVM-specific objects.\nRepresents an array literal (eg. <code>$(1 2 3)</code>)\nRepresents a big integer (bigger than a 64-bit signed …\nRepresents a decimal number literal (eg. <code>3.14</code>).\nCall to an inlined method node (no dispatching like a …\nRepresents a integer number literal (eg. <code>42</code>).\nRepresents a string literal (eg. <code>&#39;hello&#39;</code>).\nRepresents a symbol literal (eg. <code>#foo</code>).\nThe method’s body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of local variables\nThe method’s signature (eg. <code>println</code>, <code>at:put:</code> or <code>==</code>).\nMain compilation logic.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransforms a generic MethodDef into an AST-specific one. …\nThe trait for evaluating AST nodes.\nEvaluate the node within a given universe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe trait for invoking methods and primitives.\nA local return, the value is for the immediate caller.\nA non-local return, the value is for the parent of the …\nRepresents the kinds of possible returns from an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvoke within the given universe and with the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA interpreter primitive (just a bare function pointer).\nPrimitives for the <strong>Array</strong> class.\nPrimitives for the <strong>Block</strong> and <strong>Block1</strong> class.\nPrimitives for the <strong>Block2</strong> class.\nPrimitives for the <strong>Block3</strong> class.\nPrimitives for the <strong>Class</strong> class.\nPrimitives for the <strong>Double</strong> class.\nPrimitives for the <strong>False</strong> class.\nPrimitives for the <strong>Integer</strong> class.\nPrimitives for the <strong>Method</strong> class and the <strong>Primitive</strong> class.\nPrimitives for the <strong>Object</strong> class.\nPrimitives for the <strong>String</strong> class.\nPrimitives for the <strong>Symbol</strong> class.\nPrimitives for the <strong>System</strong> class.\nPrimitives for the <strong>True</strong> class.\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nSearch for a class primitive matching the given signature.\nSearch for an instance primitive matching the given …\nGC default heap size\nThe central data structure for the interpreter.\nAssign a value to a global binding.\nThe path to search in for new classes.\nThe interpreter’s core classes.\nThe current frame for the operation\nCall <code>doesNotUnderstand:</code> on the given value, if it is …\nReturn the last <code>n</code> elements as a <code>Drain</code> iterator. Faster …\nCall <code>escapedBlock:</code> on the given value, if it is defined.\nEvaluates a block after pushing a new block frame.\nEvaluates a block after pushing a new block frame, and the …\nEvaluates a method or other after pushing a new frame onto …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGC interface\nThe known global bindings.\nReturns whether a global binding of the specified name …\nCall <code>System&gt;&gt;#initialize:</code> with the given name, if it is …\nIntern a symbol.\nThe string interner for symbols.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a class from its name into this universe.\nLoad a system class (with an incomplete hierarchy).\nSearch for a global binding.\nLookup a symbol.\nStandard pop.\nStandard push-to-stack operation. Exists so we can check …\nRemove N elements off the argument stack and return them …\nThe time record of the universe’s creation.\nCall <code>unknownGlobal:</code> on the given value, if it is defined.\nInitialize the universe from the given classpath.\nInitialize the universe from the given classpath, and …\nReturns this value as an array, if such is its type.\nReturns this value as a block, if such is its type.\nReturns this value as a class, if such is its type.\nReturns this value as an instance, if such is its type.\nReturns this value as an invokable, if such is its type.\nGet the class of the current value.\nAutomatically convert values to their underlying type. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSearch for a given method for this value.\nThe main value type.\nGet the string representation of this value.\nFor values that are to pointer types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn array of values.\nA big integer value (arbitrarily big).\nA block value, ready to be evaluated.\nA boolean value (<strong>true</strong> or <strong>false</strong>).\nA single character\nA bare class object.\nAn floating-point value.\nA generic (non-primitive) class instance.\nAn integer value.\nA bare invokable.\nThe <strong>nil</strong> value.\nA string value.\nAn interned symbol value.\nRepresents an SOM value.\nAssign a value to a local binding within this value.\nGet the class of the current value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSearch for a local binding within this value.\nSearch for a given method for this value.\nGet the string representation of this value.\nFacilities for manipulating blocks.\nFacilities for manipulating classes.\nFacilities for manipulating stack frames.\nFacilities for manipulating class instances.\nFacilities for manipulating class methods.\nRepresents an executable block.\nBlock definition from the AST.\nGet the block’s class.\nReference to the captured stack frame.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieve the number of parameters this block accepts.\nRepresents a loaded class.\nAssign a value to a local binding.\nGet the class of this class.\nThe class of this class.\nThe class’ fields names.\nThe class’ fields.\nReturns the argument unchanged.\nLoad up a class from its class definition from the AST. …\nUsed by the <code>fields</code> primitive. Could be made faster …\nUsed during parsing, to generate a FieldRead or a …\nCalls <code>U::from(self)</code>.\nIs this class a static one ?\nSearch for a local binding.\nSearch for a given method within this class.\nThe class’ methods/invokables.\nGet the class’ name.\nThe class’ name.\nSet the class of this class (as a weak reference).\nSet the superclass of this class (as a weak reference).\nGet the superclass of this class.\nThe superclass of this class.\nRepresents a stack frame.\nTODO: doc, and unify better with other function.\nReturns the argument unchanged.\nReturns the true size of a Frame, counting the heap stored …\nCalls <code>U::from(self)</code>.\nLocal variables that get defined within this frame.\nThis frame’s kind.\nParameters for this frame.\nRepresents a generic (non-primitive) class instance.\nAssign a value to a field binding.\nGet the class of which this is an instance from.\nThe class of which this is an instance from.\nThis instance’s fields.\nReturns the argument unchanged.\nConstruct an instance for a given class.\nCalls <code>U::from(self)</code>.\nSearch for a field binding.\nGet the superclass of this instance’s class.\nA user-defined method from the AST.\nRepresents a class method.\nThe kind of a class method.\nAn interpreter primitive.\nA trivial getter method\nA trivial global read\nA trivial literal read\nA trivial setter method\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this invokable is a primitive.\nWhether this invokable is a primitive.")