use std::fmt;

use som_value::interned::Interned;

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Bytecode {
    Dup,
    PushLocal(u8),
    PushNonLocal(u8, u8),
    PushArg(u8),
    PushNonLocalArg(u8, u8),
    PushField(u8),
    PushBlock(u8),
    PushConstant(u8),
    PushGlobal(u8),
    Inc,
    Dec,
    Push0,
    Push1,
    PushNil,
    PushSelf,
    Pop,
    PopLocal(u8, u8),
    PopArg(u8, u8),
    PopField(u8),
    Send1(Interned),
    Send2(Interned),
    Send3(Interned),
    SendN(Interned),
    SuperSend(Interned),
    ReturnSelf,
    ReturnLocal,
    ReturnNonLocal(u8),
    Jump(u16),
    JumpBackward(u16),
    JumpOnTrueTopNil(u16),
    JumpOnFalseTopNil(u16),
    JumpOnNilTopTop(u16),
    JumpOnNotNilTopTop(u16),
    JumpOnNilPop(u16),
    JumpOnNotNilPop(u16),
    JumpOnTruePop(u16),
    JumpOnFalsePop(u16),
    JumpIfGreater(u16),
    Dup2,
}

// TODO check case, padding, for pull request
impl Bytecode {
    /// Get the instruction's name.
    #[rustfmt::skip]
    pub fn name(self) -> &'static str {
        // NAMES[self as usize]
        match self {
            Self::Dup                   => "DUP",
            Self::Inc                   => "INC",
            Self::Dec                   => "DEC",
            Self::PushLocal(_)          => "PUSH_LOCAL",
            Self::PushNonLocal(_, _)    => "PUSH_NON_LOCAL",
            Self::PushArg(_)            => "PUSH_ARG",
            Self::PushNonLocalArg(_, _) => "PUSH_NON_LOCAL_ARG",
            Self::PushField(_)          => "PUSH_FIELD",
            Self::PushBlock(_)          => "PUSH_BLOCK",
            Self::PushConstant(_)       => "PUSH_CONSTANT",
            Self::PushGlobal(_)         => "PUSH_GLOBAL",
            Self::Push0                 => "PUSH_0",
            Self::Push1                 => "PUSH_1",
            Self::PushNil               => "PUSH_NIL",
            Self::PushSelf              => "PUSH_SELF",
            Self::Pop                   => "POP",
            Self::PopLocal(_, _)        => "POP_LOCAL",
            Self::PopArg(_, _)          => "POP_ARG",
            Self::PopField(_)           => "POP_FIELD",
            Self::Send1(_)              => "SEND_1",
            Self::Send2(_)              => "SEND_2",
            Self::Send3(_)              => "SEND_3",
            Self::SendN(_)              => "SEND_N",
            Self::SuperSend(_)          => "SUPER_SEND",
            Self::ReturnSelf            => "RETURN_SELF",
            Self::ReturnLocal           => "RETURN_LOCAL",
            Self::ReturnNonLocal(_)     => "RETURN_NON_LOCAL",
            Self::Jump(_)               => "JUMP",
            Self::JumpBackward(_)       => "JUMP_BACKWARD",
            Self::JumpOnTrueTopNil(_)   => "JUMP_ON_TRUE_TOP_NIL",
            Self::JumpOnFalseTopNil(_)  => "JUMP_ON_FALSE_TOP_NIL",
            Self::JumpOnNilTopTop(_)    => "JUMP_ON_NIL_TOP_TOP",
            Self::JumpOnNotNilTopTop(_) => "JUMP_ON_NOT_NIL_TOP_TOP",
            Self::JumpOnTruePop(_)      => "JUMP_ON_TRUE_POP",
            Self::JumpOnFalsePop(_)     => "JUMP_ON_FALSE_POP",
            Self::JumpOnNilPop(_)       => "JUMP_ON_NIL_POP",
            Self::JumpOnNotNilPop(_)    => "JUMP_ON_NOT_NIL_POP",
            Self::Dup2                  => "DUP2",
            Self::JumpIfGreater(_)      => "JUMP_IF_GREATER",
        }
    }

    /// Get the instruction's name padded so that every padded names are of the same length.
    #[rustfmt::skip]
    pub fn padded_name(self) -> &'static str {
        // PADDED_NAMES[self as usize]
        match self {
            Self::Dup                   => "DUP                    ",
            Self::Inc                   => "INC                    ",
            Self::Dec                   => "DEC                    ",
            Self::PushLocal(_)          => "PUSH_LOCAL             ",
            Self::PushNonLocal(_, _)    => "PUSH_NON_LOCAL         ",
            Self::PushArg(_)            => "PUSH_ARG               ",
            Self::PushNonLocalArg(_, _) => "PUSH_NON_LOCAL_ARG     ",
            Self::PushField(_)          => "PUSH_FIELD             ",
            Self::PushBlock(_)          => "PUSH_BLOCK             ",
            Self::PushConstant(_)       => "PUSH_CONSTANT          ",
            Self::PushGlobal(_)         => "PUSH_GLOBAL            ",
            Self::Push0                 => "PUSH_0                 ",
            Self::Push1                 => "PUSH_1                 ",
            Self::PushNil               => "PUSH_NIL               ",
            Self::PushSelf              => "PUSH_SELF              ",
            Self::Pop                   => "POP                    ",
            Self::PopLocal(_, _)        => "POP_LOCAL              ",
            Self::PopArg(_, _)          => "POP_ARG                ",
            Self::PopField(_)           => "POP_FIELD              ",
            Self::Send1(_)              => "SEND_1                 ",
            Self::Send2(_)              => "SEND_2                 ",
            Self::Send3(_)              => "SEND_3                 ",
            Self::SendN(_)              => "SEND_N                 ",
            Self::SuperSend(_)          => "SUPER_SEND             ",
            Self::ReturnSelf            => "RETURN_SELF            ",
            Self::ReturnLocal           => "RETURN_LOCAL           ",
            Self::ReturnNonLocal(_)     => "RETURN_NON_LOCAL       ",
            Self::Jump(_)               => "JUMP                   ",
            Self::JumpBackward(_)       => "JUMP_BACKWARD          ",
            Self::JumpOnTrueTopNil(_)   => "JUMP_ON_TRUE_TOP_NIL   ",
            Self::JumpOnFalseTopNil(_)  => "JUMP_ON_FALSE_TOP_NIL  ",
            Self::JumpOnNilTopTop(_)    => "JUMP_ON_NIL_TOP_TOP    ",
            Self::JumpOnNotNilTopTop(_) => "JUMP_ON_NOT_NIL_TOP_TOP",
            Self::JumpOnTruePop(_)      => "JUMP_ON_TRUE_POP       ",
            Self::JumpOnFalsePop(_)     => "JUMP_ON_FALSE_POP      ",
            Self::JumpOnNilPop(_)       => "JUMP_ON_NIL_POP        ",
            Self::JumpOnNotNilPop(_)    => "JUMP_ON_NOT_NIL_POP    ",
            Self::Dup2                  => "DUP2                   ",
            Self::JumpIfGreater(_)      => "JUMP_IF_GREATER        ",
        }
    }
}

impl fmt::Display for Bytecode {
    #[rustfmt::skip]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Self::Dup                       => write!(f, "DUP"),
            Self::Inc                       => write!(f, "INC"),
            Self::Dec                       => write!(f, "DEC"),
            Self::PushLocal(idx)    => write!(f, "PUSH_LOCAL {}", idx),
            Self::PushNonLocal(up_idx, idx)    => write!(f, "PUSH_NON_LOCAL {}, {}", up_idx, idx),
            Self::PushArg(idx) => write!(f, "PUSH_ARG {}", idx),
            Self::PushNonLocalArg(up_idx, idx) => write!(f, "PUSH_NON_LOCAL_ARG {}, {}", up_idx, idx),
            Self::PushField(idx)            => write!(f, "PUSH_FIELD {}", idx),
            Self::PushBlock(idx)            => write!(f, "PUSH_BLOCK {}", idx),
            Self::PushConstant(idx)         => write!(f, "PUSH_CONSTANT {}", idx),
            Self::PushGlobal(idx)         => write!(f, "PUSH_GLOBAL {}", idx),
            Self::Push0                         => write!(f, "PUSH_0"),
            Self::Push1                         => write!(f, "PUSH_1"),
            Self::PushNil                       => write!(f, "PUSH_NIL"),
            Self::PushSelf                      => write!(f, "PUSH_SELF"),
            Self::Pop                           => write!(f, "POP"),
            Self::PopLocal(up_idx, idx)     => write!(f, "POP_LOCAL {}, {}", up_idx, idx),
            Self::PopArg(up_idx, idx)  => write!(f, "POP_ARG {}, {}", up_idx, idx),
            Self::PopField(idx)             => write!(f, "POP_FIELD {}", idx),
            Self::Send1(idx)                 => write!(f, "SEND_1 {}", idx),
            Self::Send2(idx)                 => write!(f, "SEND_2 {}", idx),
            Self::Send3(idx)                 => write!(f, "SEND_3 {}", idx),
            Self::SendN(idx)                 => write!(f, "SEND_N {}", idx),
            Self::SuperSend(idx)            => write!(f, "SUPER_SEND {}", idx),
            Self::ReturnSelf                    => write!(f, "RETURN_SELF", ),
            Self::ReturnLocal               => write!(f, "RETURN_LOCAL", ),
            Self::ReturnNonLocal(scope)      => write!(f, "RETURN_NON_LOCAL {}", scope),
            Self::Jump(idx)             => write!(f, "JUMP {}", idx),
            Self::JumpBackward(idx)             => write!(f, "JUMP_BACKWARD {}", idx),
            Self::JumpOnFalseTopNil(idx) => write!(f, "JUMP_ON_FALSE_TOP_NIL {}", idx),
            Self::JumpOnTrueTopNil(idx) => write!(f, "JUMP_ON_TRUE_TOP_NIL {}", idx),
            Self::JumpOnNilTopTop(idx)    => write!(f, "JUMP_ON_NIL_TOP_TOP {}", idx),
            Self::JumpOnNotNilTopTop(idx) => write!(f, "JUMP_ON_NOT_NIL_TOP_TOP {}", idx),
            Self::JumpOnTruePop(idx) => write!(f, "JUMP_ON_TRUE_POP {}", idx),
            Self::JumpOnFalsePop(idx) => write!(f, "JUMP_ON_FALSE_POP {}", idx),
            Self::JumpOnNilPop(idx) => write!(f, "JUMP_ON_NIL_POP {}", idx),
            Self::JumpOnNotNilPop(idx) => write!(f, "JUMP_ON_NOT_NIL_POP {}", idx),
            Self::Dup2                  => write!(f, "DUP2"),
            Self::JumpIfGreater(idx)      => write!(f, "JUMP_IF_GREATER {}", idx),
        }
    }
}
